import { Application, Router, Snelm } from "./src/deps.ts";
import { nodeID, readValue, register, serviceName, logger } from "./src/mod.ts";
const router = new Router();
const registered = await register(serviceName, nodeID);
switch (registered.type) {
    case "error": {
        throw registered.error;
    }
}
router
    .get("/health", (ctx) => {
    ctx.response.status = 200;
    ctx.response.body = {
        message: "healthy",
    };
})
    .get("/tracks/:keyPath", async (ctx) => {
    const keyPath = ctx.params.keyPath;
    try {
        const result = await readValue(keyPath, serviceName, nodeID);
        switch (result.type) {
            case "value": {
                ctx.response.status = 200;
                ctx.response.body = {
                    key_path: keyPath,
                    value: result.value,
                };
                return;
            }
            case "error": {
                ctx.response.status = 404;
                ctx.response.body = {
                    message: result.error.message,
                };
                return;
            }
        }
    }
    catch (err) {
        ctx.response.status = 500;
        ctx.response.body = {
            message: err,
        };
    }
});
const app = new Application();
const snelm = new Snelm("oak");
app
    .use(async (ctx, next) => {
    ctx.response = snelm.snelm(ctx.request, ctx.response);
    await next();
})
    .use(async (ctx, next) => {
    await next();
    const rt = ctx.response.headers.get("X-Response-Time");
    logger.debug(`${ctx.request.method} ${ctx.response.status} ${ctx.request.url} - ${rt}`);
})
    .use(async (ctx, next) => {
    const start = Date.now();
    await next();
    const ms = Date.now() - start;
    ctx.response.headers.set("X-Response-Time", `${ms}ms`);
})
    .use(router.routes())
    .use(router.allowedMethods())
    .use((ctx) => {
    ctx.response.status = 404;
    ctx.response.body = {
        message: "not found",
    };
});
console.log(`ðŸŒ³ oak server running at http://localhost:8000/ ðŸŒ³`);
await app.listen({ port: 8000 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQU0sVUFBVSxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4RCxRQUFRLFVBQVUsQ0FBQyxJQUFJLEVBQUU7SUFDdkIsS0FBSyxPQUFPLENBQUMsQ0FBQztRQUNaLE1BQU0sVUFBVSxDQUFDLEtBQUssQ0FBQztLQUN4QjtDQUNGO0FBRUQsTUFBTTtLQUNILEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUN0QixHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDMUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUc7UUFDbEIsT0FBTyxFQUFFLFNBQVM7S0FDbkIsQ0FBQztBQUNKLENBQUMsQ0FBQztLQUNELEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDckMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFpQixDQUFDO0lBRTdDLElBQUk7UUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdELFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNuQixLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FB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